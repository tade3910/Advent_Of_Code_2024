#!/usr/bin/env perl
use strict;
use warnings;


sub print_hash {
    my ($hashRef) = @_;
    
    while (my ($key, $value) = each %$hashRef) {
        print "Key: $key => ";
        
        if (ref $value eq 'ARRAY') {
            print "Array: " . join(", ", @$value) . "\n";
        } else {
            print "Value: $value\n";
        }
    }
}

sub inWorld {
    (my $col,my$row,my$cols,my$rows) = @_;
    if($col < 0 or $col >= $cols or $row < 0 or $row >= $rows) {
        return 0;
    }
    return 1;
}

sub printList {
    my $arr = shift;
    foreach my $val(@$arr) {
        print $val.", "
    }
    print "\n";
}

sub getLines { #Some logic error
    my($rows,$cols,$regionRef) = @_;
    my $entries = scalar %{$regionRef};
    # print_hash($regionRef);
    my $lines = 0;
    my @prev;
    my $topRow = 0;
    my $count = 0;
       while($topRow < $rows) {
        if($count > 0) {
            last;
        }
        @prev = ();
        for my $col(0..$cols - 1) {
            my $hashEntry = "$topRow,$col";
            # print "hash entry is $hashEntry and col is $col and prev is \n";
            # printList(\@prev);
            if(exists $regionRef->{$hashEntry}) {
                push @prev,1;
                # if($count == 0) {
                #     # print "found first element\n";
                #     $lines = 4;
                if($count == 0 or !$prev[$col - 1]) {
                    # print "Adding lines\n";
                    #mid left
                    $lines +=3;
                }
                $count++;
            } else {
                push @prev,0;
            }
            
        }
        $topRow++;
       }
    # print "count is $count and entries are $entries\n";
    # return $lines if $count == $entries;
    # print "lines are $lines and count is $count and topRow is $topRow\n";
    for my $row($topRow..$rows - 1) {
        printList(\@prev);
        if($count == scalar %{$regionRef}) {
            last;
        }
        my @nextPrev;
        for my $col(0..$cols - 1) {
            my $hashEntry = "$topRow,$col";
            # print "Checking $hashEntry\n";
            if(exists $regionRef->{$hashEntry}) {
                # print "New entry found\n";
                push @nextPrev,1;
                $count++;
                my $addedLines = 2;
                if ($prev[$col]) {
                    # print "Top exists\n";
                    #top exists
                    $addedLines--;
                }
                if($col != 0 and $nextPrev[$col -1]) {
                    #left exists
                    # print "Left exists\n";
                    $addedLines--;
                }
                $lines += $addedLines;
                # question is does bottom exist
            } else {
                push @nextPrev,0;
                if($prev[$col]) {
                    #bottom doesn't exist for prev
                    # print "Col $col at prev was lone so line added\n";
                    $lines++;
                }
            }
        }
        # print "lines are $lines\n";
        
        @prev = @nextPrev;
    }

    #Count last row
    for my $col(0..$cols - 1) {
        if($prev[$col]) {
            if ($col == 0 or !$prev[$col - 1]) {
                #New bottom
                $lines++;
            }
        }
        # print "lines are $lines\n";

    }
    return $lines;
}

# sub getLines {
#     my ($rows, $cols, $regionRef) = @_;
#     my $lines = 0;
#     print_hash($regionRef);
#     # Iterate over each cell in the region
#     foreach my $hashEntry (keys %{$regionRef}) {
#         my ($row, $col) = split /,/, $hashEntry;

#         # Check the four directions (up, down, left, right)
#         # Up
#         if ($row == 0 || !exists $regionRef->{"$row-1,$col"}) {
#             $lines++;
#         }
#         # Down
#         if ($row == $rows-1 || !exists $regionRef->{"$row+1,$col"}) {
#             $lines++;
#         }
#         # Left
#         if ($col == 0 || !exists $regionRef->{"$row,$col-1"}) {
#             $lines++;
#         }
#         # Right
#         if ($col == $cols-1 || !exists $regionRef->{"$row,$col+1"}) {
#             $lines++;
#         }
#     }

#     return $lines;
# }

sub getNeighbors {
    my ($row, $col, $cols, $rows) = @_;
    return (
        [$row, $col - 1,"l"],  # Left
        [$row, $col + 1,"r"],  # Right
        [$row - 1, $col,"u"],  # Up
        [$row + 1, $col,"d"],  # Down
    );
}

sub explore {
    my ($startRow, $startCol, $cols, $rows, $type, $worldRef, $exploredRef) = @_;
    my @stack = ([$startRow, $startCol]);
    my ($area, $perimeter) = (0, 0);
    my %region;
    
    while (@stack) {
        my ($row, $col) = @{pop @stack};
        next if !inWorld($col, $row, $cols, $rows);
        
        my $hashEntry = "$row,$col";
        next if exists $exploredRef->{$hashEntry};
        next if $worldRef->[$row][$col] ne $type;

        $exploredRef->{$hashEntry} = 1;
        $region{$hashEntry} = 1;
        $area++;

        foreach my $neighbor (getNeighbors($row, $col, $cols, $rows)) {
            my ($nRow, $nCol, $direction) = @$neighbor;
            print "direction is $direction\n";
            if (!inWorld($nCol, $nRow, $cols, $rows) || $worldRef->[$nRow][$nCol] ne $type) {
                $perimeter++;  # Either a world boundary or next to some other region
            } else {
                push @stack, $neighbor unless exists $exploredRef->{"$nRow,$nCol"};
            }
        }
    }
    my $lines = getLines($rows,$cols,\%region);
    return ($area, $perimeter, $lines);
}

# sub explore {
#     (my $col,my$row,my$cols,my$rows,my $type,my $worldRef,my $exploredRef,my $regionRef,my $resultRef) = @_;
#     #perimeter area lines
#     if(!inWorld($col,$row,$cols,$rows)) {
#         $resultRef->[0] = $resultRef->[0] + 1;
#         return;
#     }
#     my $hashEntry = $row . $col;
#     if(exists $exploredRef->{$hashEntry}) {
#         return;
#     }
#     if($worldRef->[$row][$col] ne $type) {
#         $resultRef->[0] = $resultRef->[0] + 1;
#         return;
#     }
#     #New entry
#     $resultRef->[1] = $resultRef->[1] + 1;

#     $exploredRef->{$hashEntry} = 1;
#     $regionRef->{$hashEntry} = 1;
#     explore($col - 1,$row,$cols,$rows,$type,$worldRef,$exploredRef,$regionRef); #up
#     explore($col + 1,$row,$cols,$rows,$type,$worldRef,$exploredRef,$regionRef); #down
#     explore($col,$row - 1,$cols,$rows,$type,$worldRef,$exploredRef,$regionRef); #left
#     explore($col,$row + 1,$cols,$rows,$type,$worldRef,$exploredRef,$regionRef); #rigt
#     return;
# }

sub getPrice {
    (my $worldRef) = @_;
    my $price = 0;
    my %explored;
    my $rows = scalar @$worldRef;
    for my $row(0 .. $rows - 1) {
        my $cols = scalar @{$worldRef->[$row]};
        for my $col(0 .. $cols - 1) {
            my $hashEntry = "$row,$col";
            if (!exists $explored{$hashEntry}) {
                my %region;
                my $type = $worldRef->[$row][$col];
                my ($area,$perimiter,$lines) =explore($row,$col,$cols,$rows,$type,$worldRef,\%explored,\%region);
                # my $perimiter = scalar %region;
                # my $area = getPerimeter($rows,$cols,\%region);
                my $curPrice = $lines * $area;
                $price += $curPrice;
                print "explored $hashEntry of type $type with perimeter $perimiter area $area lines $lines and price $curPrice so price is $price\n";
            }
        }
    }
    return $price;
}


sub getPerimeter { #Some logic error
    my($rows,$cols,$regionRef) = @_;
    my $area = 0;
    for my $row(0..$rows - 1) {
        my $count = 0;
        for my $col(0..$cols - 1) {
            my $hashEntry = $row . $col;
            if(exists $regionRef->{$hashEntry}) {
                $count += 1;
                my $leftCol = $col - 1;
                my $topRow = $row -1;
                my $leftEntry = $row . $leftCol;
                my $topEntry = $topRow . $col;
                my $addition = 4;
                if (exists $regionRef->{$leftEntry}) {
                    $addition -= 2;
                }
                if (exists $regionRef->{$topEntry}) {
                    $addition -= 2;
                }
                $area += $addition;
            }
        }
        if($count == scalar %{$regionRef}) {
            last;
        }
    }
    return $area;
}

sub getWorld {
    my $filename = shift;
    open(my $fh, '<:encoding(UTF-8)', $filename)
    or die "Could not open file '$filename' $!";
    my @world;
    while (my $row = <$fh>) {
        chomp $row;
        my @curRow = split //,$row;
        push @world,\@curRow;
    }
    return @world;
}
# getWorld("test.txt");
my @test = getWorld("test.txt");
print(getPrice(\@test)."\n");
# my @secondTest = getWorld("test2.txt");
# print(getPrice(\@secondTest)."\n");
# my @fourthTest = getWorld("test4.txt");
# print(getPrice(\@fourthTest)."\n");
# my @thirdTest = getWorld("test3.txt");
# print(getPrice(\@thirdTest)."\n");
# my @input = getWorld("input.txt");
# print(getPrice(\@input)."\n");


